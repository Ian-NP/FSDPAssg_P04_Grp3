const { getDatabase, ref, set, push, get } = require("firebase/database");
const { database } = require("../firebase"); // Import the initialized Firebase database instance

const getAllFaceIDs = async () => {
  try {
    const snapshot = await get(ref(database, "faceDescriptors")); // Use `get` instead of `once`
    return snapshot.val() || {}; // Return the data or an empty object
  } catch (error) {
    console.error("Error fetching face IDs:", error);
    throw error;
  }
};

/**
 * Create a new face descriptor. The faceId is auto-generated by Firebase.
 * @param {Object} descriptors - The descriptors for the face.
 * @returns {Promise<string>} - The new auto-generated faceId.
 */
const createFaceID = async (descriptors) => {
  try {
    // Generate a new faceId by pushing to the "faceDescriptors" reference in Firebase
    const faceDescriptorsRef = ref(database, "faceDescriptors");
    const newFaceIDRef = push(faceDescriptorsRef);
    await set(newFaceIDRef, descriptors);

    // Return the newly generated faceId (the key of the new entry)
    return newFaceIDRef.key; 
  } catch (error) {
    console.log(error);
    console.error("Error creating face ID:", error);
    throw error;
  }
};

/**
 * Update an existing face descriptor with a given faceId.
 * @param {string} faceId - The faceId to be updated.
 * @param {Object} descriptors - The updated descriptors for the face.
 * @returns {Promise<void>} - Resolves when the update is complete.
 */
const updateFaceID = async (faceId, descriptors) => {
  try {
    const faceIDRef = ref(database, `faceDescriptors/${faceId}`);
    await set(faceIDRef, descriptors); // Update the existing face descriptor

  } catch (error) {
    console.error("Error updating face ID:", error);
    throw error;
  }
};

module.exports = {
  getAllFaceIDs,
  createFaceID,
  updateFaceID
};
